local List = require("plenary.collections.py_list")
local func = require("plenary.functional")

local nhg = {
	"#not-has-grandparent?",
	"@conceal",
	"title_declaration",
	"author_declaration",
	"chapter",
	"part",
	"section",
	"subsection",
	"subsubsection",
	"paragraph",
	"subparagraph",
	"generic_command",
}

-- conceal to s
local function conceal(s)
	return { '#set! conceal "' .. (s or "") .. '"' }
end

local misc = {
	{ '"\\\\item"', "@punctuation.special", "@conceal", conceal("•") },
}

local function mapsort(tbl, surround)
	local t = func.kv_map(function(kv)
		local k, v = unpack(kv)
		if #surround == 2 then
			return surround[1] .. k .. surround[2]
		else -- #surround == 3
			return surround[1] .. k .. surround[2] .. v .. surround[3]
		end
	end, tbl)
	table.sort(t)
	return unpack(t)
end

-- generic_command on highlight group and conceals
local function generic(h, conceals)
	return {
		"generic_command",
		"command: (command_name) " .. h,
		{ "#has-ancestor? " .. h .. " math_environment inline_formula displayed_equation" },
		{ "#not-has-ancestor? " .. h .. " label_definition text_mode" },
		{ "#any-of? " .. h, mapsort(conceals, { '"\\\\', '"' }) },
		{ "#set-pairs! " .. h .. " conceal", mapsort(conceals, { '"\\\\', '" "', '"' }) },
	}
end

local function text2(h, script, conceals)
	local word = {
		"text",
		"word: (word) " .. h,
		{ "#has-ancestor? " .. h .. " " .. script },
		{ "#has-ancestor? " .. h .. " math_environment inline_formula displayed_equation" },
		{ "#not-has-ancestor? " .. h .. " label_definition text_mode" },
		{ "#any-of? " .. h, mapsort(conceals, { '"', '"' }) },
		{ "#set-pairs! " .. h .. " conceal", mapsort(conceals, { '"', '" "', '"' }) },
	}
	local scri = {
		"text",
		"word: (" .. script .. ") " .. h,
		{ "#has-ancestor? " .. h .. " math_environment inline_formula displayed_equation" },
		{ "#not-has-ancestor? " .. h .. " label_definition text_mode" },
		{ "#any-of? " .. h, mapsort(conceals, { '"_', '"' }) },
		{ "#set-pairs! " .. h .. " conceal", mapsort(conceals, { '"_', '" "', '"' }) },
	}
	return { word, scri }
end

local function generic_t(t)
	local commands = vim.tbl_map(function(c)
		return '"\\\\' .. c .. '"'
	end, t)
	return {
		"generic_command",
		"command: (command_name) @conceal",
		{ "#any-of? @conceal", unpack(commands) },
		conceal(),
	}
end

local function generic_s(conceals)
	local h = "@text.math"
	return {
		{ "generic_command", "command: (command_name)", "arg: (curly_group)" },
		h,
		{ "#any-of? " .. h, mapsort(conceals, { '"\\\\', '"' }) },
		{ "#set-pairs! " .. h .. " conceal", mapsort(conceals, { '"\\\\', '" "', '"' }) },
	}
end

local delimiters = {
	{ 'curly_group "{" @conceal', nhg, conceal() },
	{ 'curly_group "}" @conceal', nhg, conceal() },
	{ "math_delimiter left_command: _ @conceal ", conceal() },
	{ "math_delimiter right_command: _ @conceal ", conceal() },
	{ 'inline_formula "$" @conceal ', conceal() },
	{ 'inline_formula "\\\\(" @conceal ', conceal() },
	{ 'inline_formula "\\\\)" @conceal ', conceal() },
	{ 'displayed_equation "\\\\[" @conceal ', conceal() },
	{ 'displayed_equation "\\\\]" @conceal ', conceal() },
	{ 'displayed_equation "$$" @conceal ', conceal() },
	{ "text_mode command: _ @conceal ", conceal() },
}

local item = { '"\\\\item"', "@punctuation.special", "@conceal", conceal() }

local greek = generic("@text.math", {
	alpha = "α",
	beta = "β",
	chi = "χ",
	Chi = "Χ",
	delta = "δ",
	Delta = "Δ",
	eta = "η",
	gamma = "γ",
	Gamma = "Γ",
	iota = "ι",
	kappa = "κ",
	lambda = "λ",
	Lambda = "Λ",
	mu = "μ",
	nu = "ν",
	omega = "ω",
	Omega = "Ω",
	phi = "ϕ",
	Phi = "Φ",
	pi = "π",
	Pi = "Π",
	psi = "ψ",
	Psi = "Ψ",
	rho = "ρ",
	sigma = "σ",
	Sigma = "Σ",
	tau = "τ",
	theta = "θ",
	Theta = "Θ",
	upsilon = "υ",
	Upsilon = "Υ",
	varepsilon = "ε",
	varphi = "φ",
	varpi = "ϖ",
	varrho = "ϱ",
	varsigma = "ς",
	vartheta = "ϑ",
	xi = "ξ",
	Xi = "Ξ",
	zeta = "ζ",
})

local operators = generic("@operator", {
	["in"] = "∈",
	amalg = "∐",
	angle = "∠",
	approx = "≈",
	operatorname = "",
	ast = "∗",
	asymp = "≍",
	backslash = "∖",
	because = "∵",
	bigcap = "∩",
	bigcirc = "○",
	bigcup = "∪",
	bigodot = "⊙",
	bigoplus = "⊕",
	bigotimes = "⊗",
	bigsqcup = "⊔",
	bigtriangledown = "∇",
	bigtriangleup = "∆",
	bigvee = "⋁",
	rightrightarrows = "⇉",
	bigwedge = "⋀",
	impliedby = "⇐",
	bot = "⊥",
	bowtie = "⋈",
	bullet = "•",
	cap = "∩",
	cdot = "·",
	cdots = "⋯",
	circ = "∘",
	cong = "≅",
	coprod = "∐",
	copyright = "©",
	cup = "∪",
	dagger = "†",
	dashv = "⊣",
	ddagger = "‡",
	ddots = "⋱",
	diamond = "⋄",
	div = "÷",
	doteq = "≐",
	dots = "…",
	downarrow = "↓",
	Downarrow = "⇓",
	enspace = " ",
	equiv = "≡",
	exists = "∃",
	flat = "♭",
	forall = "∀",
	frown = "⁔",
	ge = "≥",
	geq = "≥",
	gets = "←",
	gg = "⟫",
	gt = ">",
	hookleftarrow = "↩",
	hookrightarrow = "↪",
	iff = "⇔",
	Im = "ℑ",
	implies = "⇒",
	int = "∫",
	jmath = "𝚥",
	land = "∧",
	langle = "⟨",
	lceil = "⌈",
	ldots = "…",
	le = "≤",
	left = "",
	leftarrow = "←",
	Leftarrow = "⇐",
	leftharpoondown = "↽",
	leftharpoonup = "↼",
	leftrightarrow = "↔",
	Leftrightarrow = "⇔",
	leq = "≤",
	leq = "≤",
	lfloor = "⌊",
	ll = "≪",
	lmoustache = "╭",
	lor = "∨",
	lt = "<",
	mapsto = "↦",
	mid = "∣",
	models = "╞",
	mp = "∓",
	nabla = "∇",
	natural = "♮",
	ne = "≠",
	nearrow = "↗",
	neg = "¬",
	neq = "≠",
	ni = "∋",
	notin = "∉",
	nwarrow = "↖",
	odot = "⊙",
	oint = "∮",
	ominus = "⊖",
	oplus = "⊕",
	oslash = "⊘",
	otimes = "⊗",
	owns = "∋",
	hookrightarrow = "↪",
	twoheadrightarrow = "↠",
	P = "¶",
	parallel = "║",
	partial = "∂",
	perp = "⊥",
	pm = "±",
	prec = "≺",
	preceq = "⪯",
	prime = "′",
	prod = "∏",
	propto = "∝",
	qquad = " ",
	quad = " ",
	rangle = "⟩",
	rceil = "⌉",
	Re = "ℜ",
	rfloor = "⌋",
	right = "",
	rightarrow = "→",
	Rightarrow = "⇒",
	rightleftharpoons = "⇌",
	rmoustache = "╮",
	S = "§",
	searrow = "↘",
	setminus = "∖",
	sharp = "♯",
	sim = "∼",
	simeq = "⋍",
	smile = "‿",
	sqcap = "⊓",
	sqcup = "⊔",
	sqrt = "√",
	sqsubset = "⊏",
	sqsubseteq = "⊑",
	sqsupset = "⊐",
	sqsupseteq = "⊒",
	star = "✫",
	subset = "⊂",
	subseteq = "⊆",
	succ = "≻",
	succeq = "⪰",
	sum = "∑",
	supset = "⊃",
	supseteq = "⊇",
	surd = "√",
	swarrow = "↙",
	therefore = "∴",
	times = "×",
	to = "→",
	top = "⊤",
	triangle = "∆",
	triangleleft = "⊲",
	triangleright = "⊳",
	uparrow = "↑",
	Uparrow = "⇑",
	updownarrow = "↕",
	Updownarrow = "⇕",
	nexists = "∄",
	upharpoonright = "↾",
	vdash = "⊢",
	vdots = "⋮",
	vee = "∨",
	wedge = "∧",
	vert = "|",
	wp = "℘",
	wr = "≀",
})

local symbols = generic("@text.math", {
	aleph = "ℵ",
	clubsuit = "♣",
	diamondsuit = "♢",
	ell = "ℓ",
	["#"] = "#",
	emptyset = "∅",
	hbar = "ℏ",
	heartsuit = "♡",
	imath = "ɩ",
	infty = "∞",
	spadesuit = "♠",
	square = "□",
	varnothing = "∅",
})

local typography = generic_t({
	"emph",
	"mathit",
	"textit",
	"mathbf",
	"textbf",
})

local scripts = generic_s({
	["mathbb{A}"] = "𝔸",
	["mathbb{B}"] = "𝔹",
	["mathbb{C}"] = "ℂ",
	["mathbb{D}"] = "𝔻",
	["mathbb{E}"] = "𝔼",
	["mathbb{F}"] = "𝔽",
	["mathbb{G}"] = "𝔾",
	["mathbb{H}"] = "ℍ",
	["mathbb{I}"] = "𝕀",
	["mathbb{J}"] = "𝕁",
	["mathbb{K}"] = "𝕂",
	["mathbb{L}"] = "𝕃",
	["mathbb{M}"] = "𝕄",
	["mathbb{N}"] = "ℕ",
	["mathbb{O}"] = "𝕆",
	["mathbb{P}"] = "ℙ",
	["mathbb{Q}"] = "ℚ",
	["mathbb{R}"] = "ℝ",
	["mathbb{S}"] = "𝕊",
	["mathbb{T}"] = "𝕋",
	["mathbb{U}"] = "𝕌",
	["mathbb{V}"] = "𝕍",
	["mathbb{W}"] = "𝕎",
	["mathbb{X}"] = "𝕏",
	["mathbb{Y}"] = "𝕐",
	["mathbb{Z}"] = "ℤ",
	["mathcal{A}"] = "𝓐",
	["mathcal{B}"] = "𝓑",
	["mathcal{C}"] = "𝓒",
	["mathcal{D}"] = "𝓓",
	["mathcal{E}"] = "𝓔",
	["mathcal{F}"] = "𝓕",
	["mathcal{G}"] = "𝓖",
	["mathcal{H}"] = "𝓗",
	["mathcal{I}"] = "𝓘",
	["mathcal{J}"] = "𝓙",
	["mathcal{K}"] = "𝓚",
	["mathcal{L}"] = "𝓛",
	["mathcal{M}"] = "𝓜",
	["mathcal{N}"] = "𝓝",
	["mathcal{O}"] = "𝓞",
	["mathcal{P}"] = "𝓟",
	["mathcal{Q}"] = "𝓠",
	["mathcal{R}"] = "𝓡",
	["mathcal{S}"] = "𝓢",
	["mathcal{T}"] = "𝓣",
	["mathcal{U}"] = "𝓤",
	["mathcal{V}"] = "𝓥",
	["mathcal{W}"] = "𝓦",
	["mathcal{X}"] = "𝓧",
	["mathcal{Y}"] = "𝓨",
	["mathcal{Z}"] = "𝓩",
	["mathfrak{A}"] = "𝔄",
	["mathfrak{a}"] = "𝔞",
	["mathfrak{B}"] = "𝔅",
	["mathfrak{b}"] = "𝔟",
	["mathfrak{C}"] = "ℭ",
	["mathfrak{c}"] = "𝔠",
	["mathfrak{D}"] = "𝔇",
	["mathfrak{d}"] = "𝔡",
	["mathfrak{E}"] = "𝔈",
	["mathfrak{e}"] = "𝔢",
	["mathfrak{F}"] = "𝔉",
	["mathfrak{f}"] = "𝔣",
	["mathfrak{G}"] = "𝔊",
	["mathfrak{g}"] = "𝔤",
	["mathfrak{H}"] = "ℌ",
	["mathfrak{h}"] = "𝔥",
	["mathfrak{I}"] = "ℑ",
	["mathfrak{i}"] = "𝔦",
	["mathfrak{J}"] = "𝔍",
	["mathfrak{j}"] = "𝔧",
	["mathfrak{K}"] = "𝔎",
	["mathfrak{k}"] = "𝔨",
	["mathfrak{L}"] = "𝔏",
	["mathfrak{l}"] = "𝔩",
	["mathfrak{M}"] = "𝔐",
	["mathfrak{m}"] = "𝔪",
	["mathfrak{N}"] = "𝔑",
	["mathfrak{n}"] = "𝔫",
	["mathfrak{O}"] = "𝔒",
	["mathfrak{o}"] = "𝔬",
	["mathfrak{P}"] = "𝔓",
	["mathfrak{p}"] = "𝔭",
	["mathfrak{Q}"] = "𝔔",
	["mathfrak{q}"] = "𝔮",
	["mathfrak{R}"] = "ℜ",
	["mathfrak{r}"] = "𝔯",
	["mathfrak{S}"] = "𝔖",
	["mathfrak{s}"] = "𝔰",
	["mathfrak{T}"] = "𝔗",
	["mathfrak{t}"] = "𝔱",
	["mathfrak{U}"] = "𝔘",
	["mathfrak{u}"] = "𝔲",
	["mathfrak{V}"] = "𝔙",
	["mathfrak{v}"] = "𝔳",
	["mathfrak{W}"] = "𝔚",
	["mathfrak{w}"] = "𝔴",
	["mathfrak{X}"] = "𝔛",
	["mathfrak{x}"] = "𝔵",
	["mathfrak{Y}"] = "𝔜",
	["mathfrak{y}"] = "𝔶",
	["mathfrak{Z}"] = "ℨ",
	["mathfrak{z}"] = "𝔷",
	["mathscr{A}"] = "𝓐",
	["mathscr{B}"] = "𝓑",
	["mathscr{C}"] = "𝓒",
	["mathscr{D}"] = "𝓓",
	["mathscr{E}"] = "𝓔",
	["mathscr{F}"] = "𝓕",
	["mathscr{G}"] = "𝓖",
	["mathscr{H}"] = "𝓗",
	["mathscr{I}"] = "𝓘",
	["mathscr{J}"] = "𝓙",
	["mathscr{K}"] = "𝓚",
	["mathscr{L}"] = "𝓛",
	["mathscr{M}"] = "𝓜",
	["mathscr{N}"] = "𝓝",
	["mathscr{O}"] = "𝓞",
	["mathscr{P}"] = "𝓟",
	["mathscr{Q}"] = "𝓠",
	["mathscr{R}"] = "𝓡",
	["mathscr{S}"] = "𝓢",
	["mathscr{T}"] = "𝓣",
	["mathscr{U}"] = "𝓤",
	["mathscr{V}"] = "𝓥",
	["mathscr{W}"] = "𝓦",
	["mathscr{X}"] = "𝓧",
	["mathscr{Y}"] = "𝓨",
	["mathscr{Z}"] = "𝓩",
	["mathsf{A}"] = "𝖠",
	["mathsf{a}"] = "𝖺",
	["mathsf{B}"] = "𝖡",
	["mathsf{b}"] = "𝖻",
	["mathsf{C}"] = "𝖢",
	["mathsf{c}"] = "𝖼",
	["mathsf{D}"] = "𝖣",
	["mathsf{d}"] = "𝖽",
	["mathsf{E}"] = "𝖤",
	["mathsf{e}"] = "𝖾",
	["mathsf{F}"] = "𝖥",
	["mathsf{f}"] = "𝖿",
	["mathsf{G}"] = "𝖦",
	["mathsf{g}"] = "𝗀",
	["mathsf{H}"] = "𝖧",
	["mathsf{h}"] = "𝗁",
	["mathsf{I}"] = "𝖨",
	["mathsf{i}"] = "𝗂",
	["mathsf{J}"] = "𝖩",
	["mathsf{j}"] = "𝗃",
	["mathsf{K}"] = "𝖪",
	["mathsf{k}"] = "𝗄",
	["mathsf{L}"] = "𝖫",
	["mathsf{l}"] = "𝗅",
	["mathsf{M}"] = "𝖬",
	["mathsf{m}"] = "𝗆",
	["mathsf{N}"] = "𝖭",
	["mathsf{n}"] = "𝗇",
	["mathsf{O}"] = "𝖮",
	["mathsf{o}"] = "𝗈",
	["mathsf{P}"] = "𝖯",
	["mathsf{p}"] = "𝗉",
	["mathsf{Q}"] = "𝖰",
	["mathsf{q}"] = "𝗊",
	["mathsf{R}"] = "𝖱",
	["mathsf{r}"] = "𝗋",
	["mathsf{S}"] = "𝖲",
	["mathsf{s}"] = "𝗌",
	["mathsf{T}"] = "𝖳",
	["mathsf{t}"] = "𝗍",
	["mathsf{U}"] = "𝖴",
	["mathsf{u}"] = "𝗎",
	["mathsf{V}"] = "𝖵",
	["mathsf{v}"] = "𝗏",
	["mathsf{W}"] = "𝖶",
	["mathsf{w}"] = "𝗐",
	["mathsf{X}"] = "𝖷",
	["mathsf{x}"] = "𝗑",
	["mathsf{Y}"] = "𝖸",
	["mathsf{y}"] = "𝗒",
	["mathsf{Z}"] = "𝖹",
	["mathsf{z}"] = "𝗓",
})

local subscripts = List:concat(
	text2("@text.math", "subscript", {
		["0"] = "₀",
		["1"] = "₁",
		["2"] = "₂",
		["3"] = "₃",
		["4"] = "₄",
		["5"] = "₅",
		["6"] = "₆",
		["7"] = "₇",
		["8"] = "₈",
		["9"] = "₉",
		a = "ₐ",
		e = "ₑ",
		h = "ₕ",
		i = "ᵢ",
		j = "ⱼ",
		k = "ₖ",
		l = "ₗ",
		m = "ₘ",
		n = "ₙ",
		o = "ₒ",
		p = "ₚ",
		r = "ᵣ",
		s = "ₛ",
		t = "ₜ",
		u = "ᵤ",
		v = "ᵥ",
		x = "ₓ",
	}),
	text2("@operator", "subscript", {
		["+"] = "₊",
		["-"] = "₋",
		["/"] = "ˏ",
	})
)

local supscripts = List:concat(

	text2("@text.math", "superscript", {
		["0"] = "⁰",
		["1"] = "¹",
		["2"] = "²",
		["3"] = "³",
		["4"] = "⁴",
		["5"] = "⁵",
		["6"] = "⁶",
		["7"] = "⁷",
		["8"] = "⁸",
		["9"] = "⁹",
		a = "ᵃ",
		b = "ᵇ",
		c = "ᶜ",
		d = "ᵈ",
		e = "ᵉ",
		f = "ᶠ",
		g = "ᵍ",
		h = "ʰ",
		i = "ⁱ",
		j = "ʲ",
		k = "ᵏ",
		l = "ˡ",
		m = "ᵐ",
		n = "ⁿ",
		o = "ᵒ",
		p = "ᵖ",
		r = "ʳ",
		s = "ˢ",
		t = "ᵗ",
		u = "ᵘ",
		v = "ᵛ",
		w = "ʷ",
		x = "ˣ",
		y = "ʸ",
		z = "ᶻ",
		A = "ᴬ",
		B = "ᴮ",
		D = "ᴰ",
		E = "ᴱ",
		G = "ᴳ",
		H = "ᴴ",
		I = "ᴵ",
		J = "ᴶ",
		K = "ᴷ",
		L = "ᴸ",
		M = "ᴹ",
		N = "ᴺ",
		O = "ᴼ",
		P = "ᴾ",
		R = "ᴿ",
		T = "ᵀ",
		U = "ᵁ",
		V = "ⱽ",
		W = "ᵂ",
	}),
	text2("@operator", "superscript", {
		["+"] = "⁺",
		["-"] = "⁻",
		["<"] = "˂",
		[">"] = "˃",
		["/"] = "ˊ",
		["\\."] = "˙",
		["="] = "˭",
	})
)

return {
	delimiters = delimiters,
	greek = greek,
	operators = operators,
	symbols = symbols,
	typography = typography,
	scripts = scripts,
	subscripts = subscripts,
	supscripts = supscripts,
	misc = misc,
}
